{% schema %} 
{
  "name": "Shoppable Video Section",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Check out these stories ðŸ‘‡"
    }
  ],
  "presets": [
    {
      "name": "Shoppable Video Section",
      "category": "Video"
    }
  ]
}
{% endschema %}

<div class="page-width">
  <div class="shopablevideo-section">
    <h2 class="video-heading">{{ section.settings.heading }}</h2>
    <div class="video-thumbs">
      {% for video_url in product.metafields.custom.video_section.value %}
        <div class="video-thumb" data-index="{{ forloop.index0 }}">
          <video  autoplay="" playsinline="" muted="muted" preload="none" loop="loop">
            <source src="{{ video_url }}" type="video/mp4">
          </video>
        </div>
      {% endfor %}
    </div>
    <!-- Popup Modal -->
    <div class="video-modal" id="videoModal">
      <div class="swiper video-swiper">
        <div class="swiper-wrapper">
          {% for video_url in product.metafields.custom.video_section.value %}
            <div class="swiper-slide">
              <video src="{{ video_url }}" playsinline></video>
            </div>
          {% endfor %}
        </div>
        <div class="swiper-button-next">
          <svg data-v-8d1c4d9c="" width="20" height="12" fill="none" xmlns="http://www.w3.org/2000/svg" class=""><path data-v-8d1c4d9c="" d="M10.884 10.884a1.25 1.25 0 01-1.768 0L1.161 2.929A1.25 1.25 0 112.93 1.16L10 8.232l7.071-7.07a1.25 1.25 0 111.768 1.767l-7.955 7.955zM11.25 9v1h-2.5V9h2.5z"></path></svg>
        </div>
        <div class="swiper-button-prev">
          <svg data-v-8d1c4d9c="" width="20" height="12" fill="none" xmlns="http://www.w3.org/2000/svg" class=""><path data-v-8d1c4d9c="" d="M10.884 1.116a1.25 1.25 0 00-1.768 0L1.161 9.071A1.25 1.25 0 102.93 10.84L10 3.768l7.071 7.07a1.25 1.25 0 101.768-1.767l-7.955-7.955zM11.25 3V2h-2.5v1h2.5z"></path></svg>
        </div>
      </div>

      <!-- Mute toggle button -->
      <button id="muteToggle" aria-label="Mute/unmute video" title="Mute/unmute video">
        ðŸ”ˆ
      </button>

      <span class="close-modal">Ã—</span>
    </div>
  </div>
</div>

<!-- Swiper CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css"/>

<style>

.shopablevideo-section {
    padding: 40px 0px;
}
.video-heading{

}
.shopablevideo-section .video-thumbs {
    display: flex;
    gap: 20px;
    justify-content: flex-start;
    flex-wrap: nowrap;
    overflow: auto;
}
}
.video-thumb {
    position: relative;
}
.video-thumb {
  position: relative;
  text-align: center;
  cursor: pointer;
}

.video-thumb video {
  width: 100px;
  height: 100px;
  border-radius: 50%;
  border: 3px solid #0d3b66; /* border color */
  padding:3px;
  object-fit: cover;
  display: block;
}

/* Play icon overlay */
.video-thumb::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 0; 
  height: 0; 
  border-left: 20px solid white; /* Play triangle */
  border-top: 12px solid transparent;
  border-bottom: 12px solid transparent;
  z-index: 2;
  pointer-events: none;
}

/* Dark transparent overlay */
.video-thumb::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100px;
  height: 100px;
  border-radius: 50%;
  z-index: 1;
  pointer-events: none;
}


.video-modal {
  display: none;
  position: fixed;
  top:0; left:0;
  width:100%; height:100%;
  background: rgba(0,0,0,0.9);
  z-index: 9999;
}
.video-modal.active {
  display: flex;
  align-items: center;
  justify-content: center;
}
.video-swiper {
  width: 100%;
}
.swiper-slide {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}
.swiper-slide video {
  max-height: 65vh;
  border-radius: 20px;
}
.swiper-slide.swiper-slide-active video {
    max-height: 80vh;
}


/* Mute button styles */
#muteToggle {
  font-size: 1.5rem;
  user-select: none;
  transition: background 0.3s ease;
  display:none; position:absolute; bottom: 20%; right: 41%; transform: translateX(41%); background: transparent; border:none; color:#fff;  border-radius: 5px; cursor:pointer; z-index:10000;
}

.close-modal {
    position: absolute;
    top: 10%;
    right: 41%;
    transform: translateX(41%);
    font-size: 2rem;
    color: white;
    cursor: pointer;
    z-index:10000;
}
.swiper-button-next {
    right: 31%;
    color:#fff;
}
.swiper-button-prev {
   left: 30%;
     color:#fff;
}
.swiper-button-disabled {
    display: none;
}

@media (max-width:767px) {
  .video-swiper {
    width: 90%;
}
 .swiper-button-next {
    right: 0%;
}
.swiper-button-prev {
    left: 0%;
}

.close-modal {
    right: 10%;
    transform: translateX(10%);
 
}

 #muteToggle {
 right: 10%; transform: translateX(10%); 
} 




}

button#ProductSubmitButton-template--25161406251275__main {
    pointer-events: none;
}
</style>

<!-- Swiper JS -->
<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>

<script>
document.addEventListener("DOMContentLoaded", function(){
  const modal = document.getElementById('videoModal');
  const closeModal = modal.querySelector('.close-modal');
  const thumbs = document.querySelectorAll('.video-thumb');
  const modalVideos = modal.querySelectorAll('#videoModal video');
  const muteToggle = document.getElementById('muteToggle');
  let swiper;

  function pauseAllVideos() {
    modalVideos.forEach(v => { v.pause(); });
  }

  function playOnlyActive() {
    pauseAllVideos();
    let activeVideo = modalVideos[swiper.activeIndex];
    if (activeVideo) {
      activeVideo.currentTime = 0;
      activeVideo.play();
      updateMuteButton(activeVideo);
    } else {
      muteToggle.style.display = 'none';
    }
  }

  function updateMuteButton(video) {
    if (!video) {
      muteToggle.style.display = 'none';
      return;
    }
    muteToggle.style.display = 'block';
    muteToggle.textContent = video.muted ? 'ðŸ”‡' : 'ðŸ”ˆ';
  }

  muteToggle.addEventListener('click', () => {
    if (!swiper) return;
    const activeVideo = modalVideos[swiper.activeIndex];
    if (!activeVideo) return;
    activeVideo.muted = !activeVideo.muted;
    updateMuteButton(activeVideo);
  });

  thumbs.forEach((thumb, index) => {
    thumb.addEventListener('click', () => {
      modal.classList.add('active');

      if (!swiper) {
      
            swiper = new Swiper('.video-swiper', {
          slidesPerView: 1, // Default for mobile
          centeredSlides: true,
          navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev',
          },
          breakpoints: {
            768: { // Tablet and above
              slidesPerView: 3
            }
          },
          on: {
            slideChange: playOnlyActive
          }
        });


        // Add click events for slides
        swiper.slides.forEach((slide, i) => {
          const videoEl = slide.querySelector('video');
          slide.addEventListener('click', () => {
            if (i === swiper.activeIndex) {
              // Toggle play/pause for center video
              if (videoEl.paused) {
                pauseAllVideos();
                videoEl.play();
              } else {
                videoEl.pause();
              }
            } else {
              // Move to new slide and play
              swiper.slideTo(i);
              setTimeout(playOnlyActive, 200);
            }
          });
        });
      }

      swiper.slideTo(index, 0);
      playOnlyActive();

      // Update mute button after short delay
      setTimeout(() => {
        const activeVideo = modalVideos[swiper.activeIndex];
        updateMuteButton(activeVideo);
      }, 100);
    });
  });

  closeModal.addEventListener('click', () => {
    modal.classList.remove('active');
    pauseAllVideos();
    muteToggle.style.display = 'none';
  });
});
</script>
