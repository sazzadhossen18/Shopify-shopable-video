{% schema %} 
{
  "name": "Shoppable Video Stories",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Check out these stories ðŸ‘‡"
    }
  ],
  "blocks": [
    {
      "type": "video_item",
      "name": "Video",
      "settings": [
        {
          "type": "image_picker",
          "id": "thumbnail",
          "label": "Thumbnail Image"
        },
        {
          "type": "url",
          "id": "video_url",
          "label": "Video URL"
        },
        {
          "type": "text",
          "id": "caption",
          "label": "Caption",
          "default": "Our Product"
        }
      ]
    }
  ],
  "max_blocks": 20,
  "presets": [
    {
      "name": "Shoppable Video Stories Slider",
      "category": "Video"
    }
  ]
}
{% endschema %}

<h2 style="text-align:center">{{ section.settings.heading }}</h2>
<div class="video-thumbs">
  {% for block in section.blocks %}
    <div class="video-thumb" data-index="{{ forloop.index0 }}">

      <video  autoplay="" playsinline="" muted="muted" preload="none" loop="loop">
                    <source src="{{ block.settings.video_url }}" type="video/mp4">
               
                    </video>
    </div>
  {% endfor %}
</div>

<!-- Popup Modal -->
<div class="video-modal" id="videoModal">
  <div class="swiper video-swiper">
    <div class="swiper-wrapper">
      {% for block in section.blocks %}
        <div class="swiper-slide">
          <video src="{{ block.settings.video_url }}" playsinline></video>
        </div>
      {% endfor %}
    </div>
    <div class="swiper-button-next"></div>
    <div class="swiper-button-prev"></div>
  </div>

  <!-- Mute toggle button -->
  <button id="muteToggle" aria-label="Mute/unmute video" title="Mute/unmute video" style="display:none; position:absolute; bottom: 40px; right: 50%; transform: translateX(50%); background: rgba(0,0,0,0.5); border:none; color:#fff; padding: 8px 12px; border-radius: 5px; cursor:pointer; z-index:10000;">
    ðŸ”ˆ
  </button>

  <span class="close-modal">Ã—</span>
</div>

<!-- Swiper CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css"/>

<style>
.video-thumbs {
  display: flex;
  gap: 40px;
  justify-content: center;
  flex-wrap: wrap;
}

.video-thumb {
  position: relative;
  text-align: center;
  cursor: pointer;
}

.video-thumb video {
  width: 120px;
  height: 120px;
  border-radius: 50%;
  border: 3px solid #0d3b66; /* border color */
  object-fit: cover;
  display: block;
}

/* Play icon overlay */
.video-thumb::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 0; 
  height: 0; 
  border-left: 20px solid white; /* Play triangle */
  border-top: 12px solid transparent;
  border-bottom: 12px solid transparent;
  z-index: 2;
  pointer-events: none;
}

/* Dark transparent overlay */
.video-thumb::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 120px;
  height: 120px;
  border-radius: 50%;
  background: rgba(0,0,0,0.25);
  z-index: 1;
  pointer-events: none;
}

.video-thumb p {
  margin-top: 8px;
  font-size: 14px;
  color: #333;
}


.video-thumbs {
  display: flex;
  gap: 20px;
  justify-content: center;
  flex-wrap: wrap;
}
.video-thumb {
  cursor: pointer;
  text-align: center;
}
.video-thumb img {
  width: 100px;
  height: 100px;
  border-radius: 50%;
  border: 3px solid #0d3b66;
  object-fit: cover;
}
.video-modal {
  display: none;
  position: fixed;
  top:0; left:0;
  width:100%; height:100%;
  background: rgba(0,0,0,0.9);
  z-index: 9999;
}
.video-modal.active {
  display: flex;
  align-items: center;
  justify-content: center;
}
.video-swiper {
  width: 80%;
}
.swiper-slide {
  display: flex;
  justify-content: center;
}
.swiper-slide video {
  max-height: 80vh;
  border-radius: 10px;
}

/* Mute button styles */
#muteToggle {
  font-size: 1.5rem;
  user-select: none;
  transition: background 0.3s ease;
}
#muteToggle:hover {
  background: rgba(0,0,0,0.8);
}

.close-modal {
  position: absolute;
  top: 20px;
  right: 40px;
  font-size: 2rem;
  color: white;
  cursor: pointer;
}
</style>

<!-- Swiper JS -->
<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>

<script>
document.addEventListener("DOMContentLoaded", function(){
  const modal = document.getElementById('videoModal');
  const closeModal = modal.querySelector('.close-modal');
  const thumbs = document.querySelectorAll('.video-thumb');
  const modalVideos = modal.querySelectorAll('#videoModal video');
  const muteToggle = document.getElementById('muteToggle');
  let swiper;

  function pauseAllVideos() {
    modalVideos.forEach(v => { v.pause(); });
  }

  function playOnlyActive() {
    pauseAllVideos();
    let activeVideo = modalVideos[swiper.activeIndex];
    if (activeVideo) {
      activeVideo.currentTime = 0;
      activeVideo.play();
      updateMuteButton(activeVideo);
    } else {
      muteToggle.style.display = 'none';
    }
  }

  function updateMuteButton(video) {
    if (!video) {
      muteToggle.style.display = 'none';
      return;
    }
    muteToggle.style.display = 'block';
    muteToggle.textContent = video.muted ? 'ðŸ”‡' : 'ðŸ”ˆ';
  }

  muteToggle.addEventListener('click', () => {
    if (!swiper) return;
    const activeVideo = modalVideos[swiper.activeIndex];
    if (!activeVideo) return;
    activeVideo.muted = !activeVideo.muted;
    updateMuteButton(activeVideo);
  });

  thumbs.forEach((thumb, index) => {
    thumb.addEventListener('click', () => {
      modal.classList.add('active');

      if (!swiper) {
        swiper = new Swiper('.video-swiper', {
          slidesPerView: 3,
          centeredSlides: true,
          navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev',
          },
          on: {
            slideChange: playOnlyActive
          }
        });

        // Add click events for slides
        swiper.slides.forEach((slide, i) => {
          const videoEl = slide.querySelector('video');
          slide.addEventListener('click', () => {
            if (i === swiper.activeIndex) {
              // Toggle play/pause for center video
              if (videoEl.paused) {
                pauseAllVideos();
                videoEl.play();
              } else {
                videoEl.pause();
              }
            } else {
              // Move to new slide and play
              swiper.slideTo(i);
              setTimeout(playOnlyActive, 200);
            }
          });
        });
      }

      swiper.slideTo(index, 0);
      playOnlyActive();

      // Update mute button after short delay
      setTimeout(() => {
        const activeVideo = modalVideos[swiper.activeIndex];
        updateMuteButton(activeVideo);
      }, 100);
    });
  });

  closeModal.addEventListener('click', () => {
    modal.classList.remove('active');
    pauseAllVideos();
    muteToggle.style.display = 'none';
  });
});
</script>
